// A flame-benchmark harness that computes various statistical properties,
// such as the mean and standard deviation.

using System;
using System.Collections.Generic;
using System.Diagnostics;
using System.Threading;
using System.IO;

/// <summary>
/// A state data structure for the statistical harness.
/// </summary>
public class StatHarnessState
{
    public const this(
        set string[] Arguments, set int MaxIterations,
        set Stopwatch Watch, set TextWriter StandardOutput)
    {
        this.Measurements = new MeasurementList();
    }

    public MeasurementList Measurements { get; private set; }

    /// <summary>
    /// Gets the stopwatch that is used by this CSV harness.
    /// </summary>
    public Stopwatch Watch { get; private set; }

    /// <summary>
    /// Gets the standard output text writer.
    /// </summary>
    public TextWriter StandardOutput { get; private set; }

    /// <summary>
    /// Gets the list of input arguments.
    /// </summary>
    public string[] Arguments { get; private set; }

    /// <summary>
    /// Gets the current iteration's index.
    /// </summary>
    public int IterationIndex { get; private set; }

    /// <summary>
    /// Gets the total number of iterations to perform.
    /// </summary>
    public int MaxIterations { get; private set; }

    /// <summary>
    /// Gets a boolean value that tells whether the benchmarking process
    /// should continue running for this configuration.
    /// </summary>
    public bool IsRunning { get { return IterationIndex < MaxIterations; } }

    /// <summary>
    /// Moves to the next iteration.
    /// </summary>
    public void NextIteration()
    {
        IterationIndex++;
    }

    /// <summary>
    /// Adds a single value to the list of recorded measurements.
    /// </summary>
    public void WriteMeasurement(double Measurement)
    {
        Measurements.Add(Measurement);
    }
}

/// <summary>
/// A harness that prints comma-separated value files to standard output.
/// It is based on StackOverflow answer:
/// http://stackoverflow.com/questions/1047218/benchmarking-small-code-samples-in-c-can-this-implementation-be-improved
/// </summary>
public module Harness
{
    // Pipeline:
    // StartBenchmark -> IsRunning -> StartIteration -> GetIterationArguments -> EndIteration -> EndBenchmark

    public StatHarnessState StartBenchmark(string[] Args, int IterationCount)
    {
        // Run at highest priority to minimize fluctuations caused by other processes/threads

        // This seems to throw a runtime exception on mono.
        // Process.GetCurrentProcess().PriorityClass = ProcessPriorityClass.High;
        Thread.CurrentThread.Priority = ThreadPriority.Highest;

        var watch = new Stopwatch();

        // clean up
        GC.Collect();
        GC.WaitForPendingFinalizers();
        GC.Collect();

        var stdOut = Console.Out;

        var tempStream = new MemoryStream();
        var writer = new StreamWriter(tempStream);
        Console.SetOut(writer);

        return new StatHarnessState(Args, IterationCount, watch, stdOut);
    }

    public StatHarnessState StartIteration(StatHarnessState State)
    {
        State.Watch.Start();
        return State;
    }

    public string[] GetIterationArguments(StatHarnessState State)
    {
        return State.Arguments;
    }

    public StatHarnessState EndIteration(StatHarnessState State)
    {
        State.Watch.Stop();
        State.WriteMeasurement(State.Watch.Elapsed.TotalMilliseconds);
        State.Watch.Reset();
        State.NextIteration();
        return State;
    }

    public bool IsRunning(StatHarnessState State)
    {
        return State.IsRunning;
    }

    public void EndBenchmark(StatHarnessState State)
    {
        Console.SetOut(State.StandardOutput);

        double mean = State.Measurements.Mean;
        double sdDev = State.Measurements.StandardDeviation;

        Console.WriteLine("Iterations, Mean, StandardDeviation, RelStandardDeviation");
        Console.WriteLine(State.Measurements.Count + ", " + mean + ", " + sdDev + ", " + (sdDev / mean));
    }
}
