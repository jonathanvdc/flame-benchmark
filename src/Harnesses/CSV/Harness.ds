using System;
using System.Collections.Generic;
using System.Diagnostics;
using System.Threading;
using System.IO;

/// <summary>
/// A state data structure for the CSV harness.
/// </summary>
public struct CSVHarnessState
{
    public const this(set Stopwatch Watch, set TextWriter StandardOutput);

    /// <summary>
    /// Gets the stopwatch that is used by this CSV harness.
    /// </summary>
    public Stopwatch Watch { get; private set; }

    /// <summary>
    /// Gets the standard output text writer.
    /// </summary>
    public TextWriter StandardOutput { get; private set; }

    /// <summary>
    /// Writes a single measurement to standard output.
    /// </summary>
    public void WriteMeasurement(double Measurement)
    {
        StandardOutput.WriteLine(Measurement);
    }
}

/// <summary>
/// A harness that prints comma-separated value files to standard output.
/// It is based on StackOverflow answer:
/// http://stackoverflow.com/questions/1047218/benchmarking-small-code-samples-in-c-can-this-implementation-be-improved
/// </summary>
public module Harness
{
    // Pipeline:
    // StartBenchmark -> StartIteration -> ... -> EndIteration -> EndBenchmark

    public CSVHarnessState StartBenchmark()
    {
        // Run at highest priority to minimize fluctuations caused by other processes/threads

        // This seems to throw a runtime exception on mono.
        // Process.GetCurrentProcess().PriorityClass = ProcessPriorityClass.High;
        Thread.CurrentThread.Priority = ThreadPriority.Highest;

        var watch = new Stopwatch();

        // clean up
        GC.Collect();
        GC.WaitForPendingFinalizers();
        GC.Collect();

        Console.WriteLine("Measurements");

        var stdOut = Console.Out;

        var tempStream = new MemoryStream();
        var writer = new StreamWriter(tempStream);
        Console.SetOut(writer);

        return new CSVHarnessState(watch, stdOut);
    }

    public CSVHarnessState StartIteration(CSVHarnessState State)
    {
        State.Watch.Start();
        return State;
    }

    public CSVHarnessState EndIteration(CSVHarnessState State)
    {
        State.Watch.Stop();
        State.WriteMeasurement(State.Watch.Elapsed.TotalMilliseconds);
        State.Watch.Reset();
        return State;
    }

    public void EndBenchmark(CSVHarnessState State)
    {
        Console.SetOut(State.StandardOutput);
    }
}
