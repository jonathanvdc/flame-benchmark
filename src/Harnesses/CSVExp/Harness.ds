// A flame-benchmark harness that invokes benchmarks with exponential input
// sizes. The results are encoded as CSV.

using System;
using System.Collections.Generic;
using System.Diagnostics;
using System.Threading;
using System.IO;

/// <summary>
/// A state data structure for the CSV harness.
/// </summary>
public class CSVHarnessState
{
    public const this(
        set int InputSize, set int Exponent, set int MaxIterations,
        set Stopwatch Watch, set TextWriter StandardOutput);

    /// <summary>
    /// Gets the stopwatch that is used by this CSV harness.
    /// </summary>
    public Stopwatch Watch { get; private set; }

    /// <summary>
    /// Gets the standard output text writer.
    /// </summary>
    public TextWriter StandardOutput { get; private set; }

    /// <summary>
    /// Gets the current iteration's index.
    /// </summary>
    public int IterationIndex { get; private set; }

    /// <summary>
    /// Gets the input size for this iteration.
    /// </summary>
    public int InputSize { get; private set; }

    /// <summary>
    /// Gets the exponent that is used to multiply the input size with.
    /// </summary>
    public int Exponent { get; private set; }

    /// <summary>
    /// Gets the maximal number of iterations to perform for this input size.
    /// </summary>
    public int MaxIterations { get; private set; }

    /// <summary>
    /// Gets a boolean value that tells whether the benchmarking process
    /// should continue running for this configuration.
    /// </summary>
    public bool IsRunning { get { return MaxIterations > 0; } }

    /// <summary>
    /// Moves to the next iteration.
    /// </summary>
    public void NextIteration()
    {
        IterationIndex++;

        if (IterationIndex == MaxIterations)
        {
            IterationIndex = 0;
            MaxIterations /= Exponent;
            InputSize *= Exponent;
        }
    }

    /// <summary>
    /// Writes a single measurement to standard output.
    /// </summary>
    public void WriteMeasurement(double Measurement)
    {
        StandardOutput.WriteLine(InputSize + ", " + Measurement);
    }
}

/// <summary>
/// A harness that prints comma-separated value files to standard output.
/// It is based on StackOverflow answer:
/// http://stackoverflow.com/questions/1047218/benchmarking-small-code-samples-in-c-can-this-implementation-be-improved
/// </summary>
public module Harness
{
    // Pipeline:
    // StartBenchmark -> IsRunning -> StartIteration -> GetIterationArguments -> EndIteration -> EndBenchmark

    public CSVHarnessState StartBenchmark(string[] Args, int IterationCount)
    {
        if (Args.Length != 2)
        {
            Console.WriteLine(
                "Expected exactly two arguments: the initial input size, " +
                "and the exponent with which that input size is multiplied.");
            Environment.Exit(1);
        }

        int initInputSize = int.Parse(Args[0]);
        int exponent = int.Parse(Args[1]);

        // Run at highest priority to minimize fluctuations caused by other processes/threads

        // This seems to throw a runtime exception on mono.
        // Process.GetCurrentProcess().PriorityClass = ProcessPriorityClass.High;
        Thread.CurrentThread.Priority = ThreadPriority.Highest;

        var watch = new Stopwatch();

        // clean up
        GC.Collect();
        GC.WaitForPendingFinalizers();
        GC.Collect();

        Console.WriteLine("\"Input size\", Measurements");

        var stdOut = Console.Out;

        var tempStream = new MemoryStream();
        var writer = new StreamWriter(tempStream);
        Console.SetOut(writer);

        return new CSVHarnessState(initInputSize, exponent, IterationCount, watch, stdOut);
    }

    public CSVHarnessState StartIteration(CSVHarnessState State)
    {
        State.Watch.Start();
        return State;
    }

    public int GetIterationArguments(CSVHarnessState State)
    {
        return State.InputSize;
    }

    public CSVHarnessState EndIteration(CSVHarnessState State)
    {
        State.Watch.Stop();
        State.WriteMeasurement(State.Watch.Elapsed.TotalMilliseconds);
        State.Watch.Reset();
        State.NextIteration();
        return State;
    }

    public bool IsRunning(CSVHarnessState State)
    {
        return State.IsRunning;
    }

    public void EndBenchmark(CSVHarnessState State)
    {
        Console.SetOut(State.StandardOutput);
    }
}
